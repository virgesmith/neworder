namespace mm {


// one-word synonyms for unsigned integral types
typedef unsigned char uchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;

// TIME definition
typedef double TIME;
typedef TIME TIME_t;

// real definition
typedef double real;

// counter definition
typedef int counter;

// integer definition
typedef int integer;

// index definition
typedef int index;

// logical definition
typedef int logical;

// time constants
CONSTANT( TIME, ANY_AGE, (TIME) -1 );
CONSTANT( TIME, TIME_UNDEF, (TIME) -1 );
CONSTANT( TIME, TIME_INFINITE, (TIME) SHRT_MAX );

extern Thread EventQueue *gpoEventQueue;

void SetCaseWeight( double dCaseWeight, double dCaseSubsampleWeight = UNUSED_VALUE );

// classifications

// ranges

// partitions

class Parameters {
	public:
		Parameters();

		double	MortalityHazard;
};

extern Parameters	*gprParam;


class PersonTable {
	public:
		PersonTable() { };

		// begin MembersDump
		//   group=<unknown token type>
		//   group=double
		double	tab0events;
		real	tab0open0;
		real	tab0close0;
		real	tab0open1;
		real	tab0close1;
		real	tab0open2;
		real	tab0close2;
		real	tab0open3;
		real	tab0close3;
		//   group=float
		//   group=long
		//   group=ulong
		//   group=int
		logical	tab0dim_filter;
		index	tab0cell;
		index	tab0total_cell;
		//   group=uint
		//   group=short
		//   group=ushort
		//   group=char
		//   group=uchar
		// end MembersDump

};

class Person : public ActorClass {
	public:
		TIME	__time;
		double	__events;
		class PersonStateFunctions	*poStateFunctions;
		class PersonDerivedStates	*poDerivedStates;
		class PersonTable	tableinfo;
		void *operator new( size_t count );

		// links to other actors

		// user-supplied data members

		// user-supplied and required functions
		Person() { };
		void Finish ( ) ; 
		void Start ( ) ; 

		// special functions generated by the pre-compiler
		Person( BOOL bInit ) { InitActor(); };
		~Person() { DeleteActor(); };
		void	InitActor();
		void	DeleteActor();
		void	InitializeStates();
		void	UpdateLinkedStates();
		void	StartSpecial1();
		void	StartSpecial2();
		void	FinishSpecial();
		void	WaitUntil( double target_time );
		void	WaitUntilThisActor(double target_time);
		void	WaitSpecial( TIME wait_time );

		// event functions and variables
		void __fastcall	MortalityEvent();
		TIME __fastcall	timeMortalityEvent();
		Event	*poMortalityEvent;

		// event processing functions
		double	EventTime( int nEventNum, int *pnEventInfo );
		void	Implement( int nEventNum, int nEventInfo );

		// state variables and their special functions
		long	Get_actor_id() { return actor_id; };
		double	Set_actor_subsample_weight( double value );
		double	Set_actor_weight( double value );

		// begin MembersDump
		//   group=<unknown token type>
		//   group=double
		double	actor_subsample_weight;
		double	actor_weight;
		TIME	age;
		double	case_seed;
		TIME	time;
		TIME	duration__max_value_out;
		TIME	duration__min_value_out;
		//   group=float
		//   group=long
		long	actor_id;
		long	case_id;
		//   group=ulong
		//   group=int
		logical	alive;
		logical	alive_value_in;
		logical	table_filter_DurationOfLife;
		logical	__finished;
		//   group=uint
		//   group=short
		//   group=ushort
		//   group=char
		//   group=uchar
		// end MembersDump

};

class PersonStateFunctions {
	public:
		PersonStateFunctions() { };
		class Person	*poParent;
		class PersonDerivedStates	*poDerivedStates;

		// state special functions
		double	Set_actor_subsample_weight( double value ){ return poParent->actor_subsample_weight = value; };
		double	Set_actor_weight( double value ){ return poParent->actor_weight = value; };
		TIME	Set_age( TIME value, bool bStartFunction = false ){ return poParent->age = value; };
		logical	Set_alive( logical value );
		TIME	Set_time( TIME value, bool bStartFunction = false ){ return poParent->time = value; };
		logical	Set_alive_value_in( logical value );
		TIME	Set_duration__max_value_out( TIME value );
		TIME	Get_duration__max_value_out();
		TIME	Set_duration__min_value_out( TIME value );
		TIME	Get_duration__min_value_out();
		logical	Set_table_filter_DurationOfLife( logical value );
};

class PersonDerivedStates {
	public:
		PersonDerivedStates() { };
		class Person	*poParent;
		class PersonStateFunctions	*poStateFunctions;

		// derived state variables and their special functions
		TIME	Set_duration_( TIME value );
		TIME	Get_duration_() { return duration_ + poParent->__time - duration__time; };

		// begin MembersDump
		//   group=<unknown token type>
		//   group=double
		TIME	duration_;
		TIME	duration__time;
		//   group=float
		//   group=long
		//   group=ulong
		//   group=int
		//   group=uint
		//   group=short
		//   group=ushort
		//   group=char
		//   group=uchar
		// end MembersDump

};

// global actor declarations
extern Thread Person	*gpoEmptyPerson;
typedef CTypedPtrArray<CObArray, Person*> PersonArray;
void	DeleteAllPersonActors();


} // namespace 
